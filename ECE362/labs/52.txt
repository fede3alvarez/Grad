;**************************************************************
;* This stationery serves as the framework for a              *
;* user application. For a more comprehensive program that    *
;* demonstrates the more advanced functionality of this       *
;* processor, please see the demonstration applications       *
;* located in the examples subdirectory of the                *
;* Freescale CodeWarrior for the HC12 Program directory       *
;**************************************************************
; Include derivative-specific definitions
            INCLUDE 'derivative.inc'

; export symbols
            XDEF Entry, CW_Step, CW_Loop, CCW_Step, CCW_Loop, DelayCount
            ;XDEF Entry, Delay, D_Loop, CW_Step, CW_Loop, CCW_Step, CCW_Loop, 
            ;, _Startup, main
            ; we use export 'Entry' as symbol. This allows us to
            ; reference 'Entry' either in the linker .prm file
            ; or from C/C++ later on

            XREF __SEG_END_SSTACK, Delay      ; symbol defined by the linker for the end of the stack


MY_CONSTANT_ROM: SECTION
port_t:     equ  $240
port_s:     equ  $248
port_p:     equ  $258
ddr_s:      equ  $24A
ddr_p:      equ  $25A

MY_VARIABLE_RAM: SECTION
            ORG   $800
STEP_SEQ:   dc.b  $0A, $12, $14, $0C
STEP_Size:  dc.w  $03
DelayCount: ds.w  $01
CW_Count:   ds.w  $01
CCW_Count:  ds.w  $01

MY_CODE:         SECTION
main:
_Startup:

; Sub-routines memory allocation
Entry:      BSET    ddr_s, #$FF           ; port s / LED setup
            BSET    ddr_p, #$3E           ; port p / Stepper motor setup
            MOVW    #$00, CW_Count        ; Inialize CW Counter to zero
            MOVW    STEP_Size, CCW_Count  ; Inialize CCW Counter to zero
            LDS     #__SEG_END_SSTACK     ; initialize the stack pointer

;INF_LOOP:   JSR     Speed
;            BRSET   port_t, #$03, INF_LOOP 
;            BRCLR   port_t, #$03, INF_LOOP 
;            BRSET   port_t, #$01, CW_Step 
;            BRSET   port_t, #$02, CCW_Step 
;            BRA     INF_LOOP

INF_LOOP:   JSR     Speed
            BRSET   port_t, #$03, INF_LOOP 
            BRCLR   port_t, #$03, INF_LOOP 
            LDAA    port_t
            BITA    #$01
            BEQ     CCW_Turn
            JSR     CW_Step
            BRA     INF_LOOP
CCW_Turn:   JSR     CCW_Step
            BRA     INF_LOOP

Speed:      BRSET   port_t, #$04, Slow               
Fast:       MOVW    #$EA60, DelayCount
            BRA     Speed_End
Slow:       MOVW    #$3A98, DelayCount
Speed_End:  RTS

CW_Step:    PSHX
            LDX     CW_Count            ; Load Location in sequence to idx X
            LDAA    STEP_SEQ,x          ; Load value on Acc. A   
            STAA    port_p              ;    and write to stepper motor
            JSR     Delay               ; Delay
            CPX     STEP_Size           ; Check if at the end of sequence
            BNE     CW_Loop             ; If not, go to CW_Loop to increase idx x
            MOVW    #$00, CW_Count      ; Otherwise, set CW_Count back to $0
            BRA     CW_End              ;    and skip to end
CW_Loop:    INX                         ;     
            STX     CW_Count            ; Store index value for later re-use      
CW_End:     PULX
            RTS

CCW_Step:   PSHX
            LDX     CCW_Count           ; Load Location in sequence to idx X
            LDAA    STEP_SEQ,x          ; Load value on Acc. A   
            STAA    port_p              ;    and write to stepper motor
            JSR     Delay               ; Delay
            CPX     $00                 ; Check if at the end of sequence (go down)
            BNE     CCW_Loop            ; If not, go to CCW_Loop to dec idx x
            MOVW    STEP_Size, CCW_Count; Otherwise, set CW_Count back to $0
            BRA     CCW_End             ;    and skip to end
CCW_Loop:   DEX                         ;
            STX     CCW_Count           ; Store index value for later re-use 
CCW_End:    PULX
            RTS
